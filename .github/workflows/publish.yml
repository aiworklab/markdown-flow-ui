name: Publish Package and Create Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run format check
        run: npm run format:check

      - name: Run tests
        run: npm test || true # Tests are optional for now

      - name: Build Storybook
        run: npm run build-storybook

  version:
    runs-on: ubuntu-latest
    needs: test
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    permissions:
      contents: write
      pull-requests: write
      issues: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      has_changes: ${{ steps.version.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for conventional commits since last release
        id: check_commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat" --grep="^fix" --grep="^BREAKING CHANGE" --extended-regexp)
            if [ -n "$COMMITS" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version and create tag
        id: version
        if: steps.check_commits.outputs.has_changes == 'true'
        run: |
          npm run bump
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
          git push --follow-tags

  build:
    runs-on: ubuntu-latest
    needs: version
    if: needs.version.outputs.has_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.version.outputs.new_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  publish:
    runs-on: ubuntu-latest
    needs: [version, build]
    if: needs.version.outputs.has_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.version.outputs.new_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Check if version exists on npm
        id: check_version
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          if npm view $PACKAGE_NAME@${{ needs.version.outputs.new_version }} version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version ${{ needs.version.outputs.new_version }} already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version ${{ needs.version.outputs.new_version }} does not exist on npm"
          fi

      - name: Publish to npm
        if: steps.check_version.outputs.exists == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish if version exists
        if: steps.check_version.outputs.exists == 'true'
        run: echo "Skipping npm publish - version ${{ needs.version.outputs.new_version }} already exists"

  release:
    runs-on: ubuntu-latest
    needs: [version, publish]
    if: needs.version.outputs.has_changes == 'true'
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.version.outputs.new_version }}

      - name: Generate release notes from changelog
        id: changelog
        run: |
          VERSION="${{ needs.version.outputs.new_version }}"
          if [ -f CHANGELOG.md ]; then
            # Extract the latest version section from CHANGELOG.md
            VERSION_SECTION=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d')
            if [ -n "$VERSION_SECTION" ]; then
              echo "release_notes<<EOF" >> $GITHUB_OUTPUT
              echo "$VERSION_SECTION" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "release_notes=Release v$VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "release_notes=Release v$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          release_name: Release v${{ needs.version.outputs.new_version }}
          body: |
            ## üì¶ Package Information
            - **Package**: [markdown-flow-ui](https://www.npmjs.com/package/markdown-flow-ui)
            - **Version**: ${{ needs.version.outputs.new_version }}
            - **Installation**: `npm install markdown-flow-ui@${{ needs.version.outputs.new_version }}`

            ## üìù Changes
            ${{ steps.changelog.outputs.release_notes }}

            ## üîó Links
            - [NPM Package](https://www.npmjs.com/package/markdown-flow-ui/v/${{ needs.version.outputs.new_version }})
            - [Documentation](https://github.com/${{ github.repository }}#readme)
            - [Issues](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: ${{ contains(needs.version.outputs.new_version, 'alpha') || contains(needs.version.outputs.new_version, 'beta') || contains(needs.version.outputs.new_version, 'rc') }}
