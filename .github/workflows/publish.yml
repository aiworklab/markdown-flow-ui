name: Publish Package and Create Release

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-*"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run format check
        run: npm run format:check

      - name: Run tests
        run: npm test || true # Tests are optional for now

      - name: Build Storybook
        run: npm run build-storybook

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Get package info
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if version exists on npm
        id: check_version
        run: |
          if npm view ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.package.outputs.version }} already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.package.outputs.version }} does not exist on npm"
          fi

      - name: Publish to npm
        if: steps.check_version.outputs.exists == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish if version exists
        if: steps.check_version.outputs.exists == 'true'
        run: echo "Skipping npm publish - version ${{ steps.package.outputs.version }} already exists"

  release:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get package info
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Extract tag name
        id: tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes from changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract the latest version section from CHANGELOG.md
            VERSION_SECTION=$(sed -n "/## \[${{ steps.package.outputs.version }}\]/,/## \[/p" CHANGELOG.md | sed '$d')
            if [ -n "$VERSION_SECTION" ]; then
              echo "release_notes<<EOF" >> $GITHUB_OUTPUT
              echo "$VERSION_SECTION" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "release_notes=Release ${{ steps.package.outputs.version }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "release_notes=Release ${{ steps.package.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          release_name: Release ${{ steps.package.outputs.version }}
          body: |
            ## üì¶ Package Information
            - **Package**: [${{ steps.package.outputs.name }}](https://www.npmjs.com/package/${{ steps.package.outputs.name }})
            - **Version**: ${{ steps.package.outputs.version }}
            - **Installation**: `npm install ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}`

            ## üìù Changes
            ${{ steps.changelog.outputs.release_notes }}

            ## üîó Links
            - [NPM Package](https://www.npmjs.com/package/${{ steps.package.outputs.name }}/v/${{ steps.package.outputs.version }})
            - [Documentation](https://github.com/${{ github.repository }}#readme)
            - [Issues](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: ${{ contains(steps.package.outputs.version, 'alpha') || contains(steps.package.outputs.version, 'beta') || contains(steps.package.outputs.version, 'rc') }}

  notify:
    runs-on: ubuntu-latest
    needs: [publish, release]
    if: always()
    steps:
      - name: Get package info
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Publish status
        run: |
          echo "‚úÖ Workflow completed!"
          echo "üì¶ Package: ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}"
          echo "üè∑Ô∏è Tag: ${GITHUB_REF#refs/tags/}"
          echo "üîó Release: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"
